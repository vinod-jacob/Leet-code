#include <iostream>
#include <string>
#include <stack>
#include<map>

using namespace std;

class Solution{
public:
    int longestValidParentheses(string s)
    {
        int longest = 0;
        map<int, int> memo;
        for(int i = 0; i < s.size() ; i++)
        {
            if(s[i] == ')') continue;
            for(int len = 2 ; i+len <= s.size() ; len = len+2)
            {
                if (isValid(s.substr(memo.find(i) != memo.end()? i+memo[i] : i, memo.find(i) != memo.end()?len - memo[i] : len)))
                {
                    longest = len > longest ? len : longest;
                    memo[i] = len;
                }
            }
        }
        return longest;
    }

    bool isValid(string s)
    {
        if (s[0] != '(') return false;
        stack<char> st;
        for(int i = 0; s[i] != '\0'; i++)
        {
            if (s[i] == '(' )
                st.push(s[i]);
            else
            {
                if(!st.empty()) //this check is needed coz top() on empty stack seg faults
                {
                    char ch = st.top();
                    if((ch == '(' && s[i] == ')'))
                        st.pop();
                    else
                        return false;
                }
                else
                    return false;
            }
        }
        if(!st.empty())
            return false;
        return true;
    }
};

int main()
{
    string s = "((())())(()))(()()(()(()))(()((((()))))))((()())()))()()(()(((((()()()())))()())(()()))((((((())))((()))()()))))(()))())))()))()())((()()))))(()(((((())))))()((()(()(())((((())(())((()()(()())))())(()(())()()))())(()()()))()(((()())(((()()())))(((()()()))(()()))()))()))))))())()()((()(())(()))()((()()()((())))()(((()())(()))())())))(((()))))())))()(())))()())))())()((()))((()))()))(((())((()()()(()((()((())))((()()))())(()()(()))))())((())))(()))()))))))()(()))())(()())))))(()))((())(()((())(((((()()()(()()())))(()())()((()(()()))(()(())((()((()))))))))(()(())()())()(()(()(()))()()()(()()())))(())(()((((()()))())))(())((()(())())))))())()()))(((())))())((()(()))(()()))((())(())))))(()(()((()((()()))))))(()()()(()()()(()(())()))()))(((()(())()())(()))())))(((()))())(()((()))(()((()()()(())()(()())()(())(()(()((((())()))(((()()(((()())(()()()(())()())())(()(()()((()))))()(()))))(((())))()()))(()))((()))))()()))))((((()(())()()()((()))((()))())())(()((()()())))))))()))(((()))))))(()())))(((()))((()))())))(((()(((())))())(()))))(((()(((((((((((((())(((()))((((())())()))())((((())(((())))())(((()))))()())()(())())(()))))()))()()()))(((((())()()((()))())(()))()()(()()))(())(()()))()))))(((())))))((()()(()()()()((())((((())())))))((((((()((()((())())(()((()))(()())())())(()(())(())(()((())((())))(())())))(()()())((((()))))((()(())(()(()())))))))))((()())()()))((()(((()((()))(((((()()()()()(()(()((()(()))(()(()((()()))))()(()()((((((()((()())()))((())()()(((((()(()))))()()((()())((()())()(())((()))()()(()))";
    Solution S1;
    cout << S1.longestValidParentheses(s) << endl;
}

